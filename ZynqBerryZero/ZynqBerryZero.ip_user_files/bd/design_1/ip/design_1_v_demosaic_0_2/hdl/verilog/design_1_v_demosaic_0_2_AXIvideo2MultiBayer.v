// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_demosaic_0_2_AXIvideo2MultiBayer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgBayer_din,
        imgBayer_full_n,
        imgBayer_write,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        Height,
        WidthIn
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] imgBayer_din;
input   imgBayer_full_n;
output   imgBayer_write;
input  [7:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [0:0] s_axis_video_TKEEP;
input  [0:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
input  [15:0] Height;
input  [15:0] WidthIn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgBayer_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imgBayer_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln117_reg_489;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] ap_phi_mux_sof_phi_fu_157_p4;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln117_fu_422_p2;
wire   [0:0] or_ln121_fu_427_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] ap_phi_mux_eol_1_phi_fu_341_p4;
reg   [11:0] j_reg_197;
reg   [0:0] eol_reg_208;
reg   [0:0] sof_6_reg_220;
reg   [0:0] axi_last_V_3_reg_230;
reg   [7:0] axi_data_V_3_reg_240;
reg   [7:0] axi_data_V_7_reg_251;
reg   [0:0] axi_last_V_9_reg_264;
reg    ap_block_state3;
reg    ap_block_state9;
wire   [10:0] trunc_ln96_1_fu_384_p1;
reg   [10:0] trunc_ln96_1_reg_438;
wire    ap_CS_fsm_state2;
wire   [11:0] grp_reg_unsigned_short_s_fu_378_ap_return;
reg   [11:0] cols_reg_443;
wire   [0:0] cmp7230_fu_392_p2;
reg   [0:0] cmp7230_reg_466;
wire    ap_CS_fsm_state4;
wire   [10:0] i_1_fu_402_p2;
reg   [10:0] i_1_reg_470;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln114_fu_411_p2;
wire   [11:0] j_1_fu_416_p2;
reg    ap_predicate_op65_read_state6;
reg    ap_block_state6_pp1_stage0_iter0;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire   [11:0] grp_reg_unsigned_short_s_fu_368_d;
wire   [11:0] grp_reg_unsigned_short_s_fu_368_ap_return;
wire   [11:0] grp_reg_unsigned_short_s_fu_378_d;
reg   [7:0] axi_data_V_reg_129;
reg   [0:0] axi_last_V_reg_141;
reg   [0:0] sof_reg_153;
reg   [10:0] i_reg_164;
wire    ap_CS_fsm_state10;
reg   [0:0] axi_last_V_2_reg_175;
reg   [0:0] axi_last_V_4_reg_326;
reg   [7:0] axi_data_V_2_reg_186;
reg   [7:0] axi_data_V_4_reg_314;
reg   [0:0] ap_phi_mux_eol_phi_fu_212_p4;
reg   [0:0] ap_phi_mux_sof_6_phi_fu_223_p4;
reg   [0:0] ap_phi_mux_axi_last_V_3_phi_fu_233_p4;
reg   [7:0] ap_phi_mux_axi_data_V_3_phi_fu_243_p4;
wire   [7:0] ap_phi_reg_pp1_iter0_axi_data_V_7_reg_251;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_9_reg_264;
reg   [7:0] ap_phi_mux_axi_data_V_4_ph_phi_fu_280_p4;
reg   [7:0] axi_data_V_4_ph_reg_277;
wire    ap_CS_fsm_state8;
reg   [0:0] ap_phi_mux_axi_last_V_4_ph_phi_fu_292_p4;
reg   [0:0] axi_last_V_4_ph_reg_289;
reg   [0:0] ap_phi_mux_eol_1_ph_phi_fu_305_p4;
reg   [0:0] eol_1_ph_reg_301;
reg   [0:0] eol_1_reg_338;
reg   [0:0] sof_4_fu_88;
reg    ap_block_state1;
reg    ap_block_pp1_stage0_01001;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [7:0] s_axis_video_TDATA_int_regslice;
wire    s_axis_video_TVALID_int_regslice;
reg    s_axis_video_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [0:0] s_axis_video_TKEEP_int_regslice;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [0:0] s_axis_video_TSTRB_int_regslice;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int_regslice;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int_regslice;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int_regslice;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int_regslice;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_167;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

design_1_v_demosaic_0_2_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_368(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(grp_reg_unsigned_short_s_fu_368_d),
    .ap_return(grp_reg_unsigned_short_s_fu_368_ap_return)
);

design_1_v_demosaic_0_2_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_378(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(grp_reg_unsigned_short_s_fu_378_d),
    .ap_return(grp_reg_unsigned_short_s_fu_378_ap_return)
);

design_1_v_demosaic_0_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int_regslice),
    .vld_out(s_axis_video_TVALID_int_regslice),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

design_1_v_demosaic_0_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

design_1_v_demosaic_0_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

design_1_v_demosaic_0_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

design_1_v_demosaic_0_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

design_1_v_demosaic_0_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

design_1_v_demosaic_0_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V_2_reg_186 <= axi_data_V_4_reg_314;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_data_V_2_reg_186 <= axi_data_V_reg_129;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
        axi_data_V_3_reg_240 <= axi_data_V_2_reg_186;
    end else if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_3_reg_240 <= axi_data_V_7_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7230_reg_466 == 1'd0))) begin
        axi_data_V_4_ph_reg_277 <= axi_data_V_3_reg_240;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd1))) begin
        axi_data_V_4_ph_reg_277 <= axi_data_V_2_reg_186;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_4_reg_314 <= ap_phi_mux_axi_data_V_4_ph_phi_fu_280_p4;
    end else if ((~((eol_1_reg_338 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (eol_1_reg_338 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_data_V_4_reg_314 <= s_axis_video_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_167)) begin
        if (((or_ln121_fu_427_p2 == 1'd1) & (icmp_ln117_fu_422_p2 == 1'd0))) begin
            axi_data_V_7_reg_251 <= ap_phi_mux_axi_data_V_3_phi_fu_243_p4;
        end else if (((or_ln121_fu_427_p2 == 1'd0) & (icmp_ln117_fu_422_p2 == 1'd0))) begin
            axi_data_V_7_reg_251 <= s_axis_video_TDATA_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_data_V_7_reg_251 <= ap_phi_reg_pp1_iter0_axi_data_V_7_reg_251;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V_2_reg_175 <= axi_last_V_4_reg_326;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_last_V_2_reg_175 <= axi_last_V_reg_141;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
        axi_last_V_3_reg_230 <= axi_last_V_2_reg_175;
    end else if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_last_V_3_reg_230 <= axi_last_V_9_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7230_reg_466 == 1'd0))) begin
        axi_last_V_4_ph_reg_289 <= eol_reg_208;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd1))) begin
        axi_last_V_4_ph_reg_289 <= axi_last_V_2_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_4_reg_326 <= ap_phi_mux_axi_last_V_4_ph_phi_fu_292_p4;
    end else if ((~((eol_1_reg_338 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (eol_1_reg_338 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_last_V_4_reg_326 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_167)) begin
        if (((or_ln121_fu_427_p2 == 1'd1) & (icmp_ln117_fu_422_p2 == 1'd0))) begin
            axi_last_V_9_reg_264 <= ap_phi_mux_axi_last_V_3_phi_fu_233_p4;
        end else if (((or_ln121_fu_427_p2 == 1'd0) & (icmp_ln117_fu_422_p2 == 1'd0))) begin
            axi_last_V_9_reg_264 <= s_axis_video_TLAST_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_9_reg_264 <= ap_phi_reg_pp1_iter0_axi_last_V_9_reg_264;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7230_reg_466 == 1'd0))) begin
        eol_1_ph_reg_301 <= eol_reg_208;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd1))) begin
        eol_1_ph_reg_301 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_1_reg_338 <= ap_phi_mux_eol_1_ph_phi_fu_305_p4;
    end else if ((~((eol_1_reg_338 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (eol_1_reg_338 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        eol_1_reg_338 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
        eol_reg_208 <= 1'd0;
    end else if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_208 <= axi_last_V_9_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_164 <= i_1_reg_470;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_164 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
        j_reg_197 <= 12'd0;
    end else if (((icmp_ln117_fu_422_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_197 <= j_1_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_4_fu_88 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (cmp7230_reg_466 == 1'd0))) begin
        sof_4_fu_88 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
        sof_6_reg_220 <= sof_4_fu_88;
    end else if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_6_reg_220 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sof_reg_153 <= 1'd0;
    end else if ((~((sof_reg_153 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_153 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sof_reg_153 <= s_axis_video_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((sof_reg_153 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_153 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        axi_data_V_reg_129 <= s_axis_video_TDATA_int_regslice;
        axi_last_V_reg_141 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cmp7230_reg_466 <= cmp7230_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cols_reg_443 <= grp_reg_unsigned_short_s_fu_378_ap_return;
        trunc_ln96_1_reg_438 <= trunc_ln96_1_fu_384_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_470 <= i_1_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln117_reg_489 <= icmp_ln117_fu_422_p2;
    end
end

always @ (*) begin
    if ((icmp_ln117_fu_422_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_3_phi_fu_243_p4 = axi_data_V_7_reg_251;
    end else begin
        ap_phi_mux_axi_data_V_3_phi_fu_243_p4 = axi_data_V_3_reg_240;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7230_reg_466 == 1'd0))) begin
        ap_phi_mux_axi_data_V_4_ph_phi_fu_280_p4 = axi_data_V_3_reg_240;
    end else begin
        ap_phi_mux_axi_data_V_4_ph_phi_fu_280_p4 = axi_data_V_4_ph_reg_277;
    end
end

always @ (*) begin
    if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_last_V_3_phi_fu_233_p4 = axi_last_V_9_reg_264;
    end else begin
        ap_phi_mux_axi_last_V_3_phi_fu_233_p4 = axi_last_V_3_reg_230;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7230_reg_466 == 1'd0))) begin
        ap_phi_mux_axi_last_V_4_ph_phi_fu_292_p4 = eol_reg_208;
    end else begin
        ap_phi_mux_axi_last_V_4_ph_phi_fu_292_p4 = axi_last_V_4_ph_reg_289;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (cmp7230_reg_466 == 1'd0))) begin
        ap_phi_mux_eol_1_ph_phi_fu_305_p4 = eol_reg_208;
    end else begin
        ap_phi_mux_eol_1_ph_phi_fu_305_p4 = eol_1_ph_reg_301;
    end
end

always @ (*) begin
    if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_212_p4 = axi_last_V_9_reg_264;
    end else begin
        ap_phi_mux_eol_phi_fu_212_p4 = eol_reg_208;
    end
end

always @ (*) begin
    if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_sof_6_phi_fu_223_p4 = 1'd0;
    end else begin
        ap_phi_mux_sof_6_phi_fu_223_p4 = sof_6_reg_220;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        imgBayer_blk_n = imgBayer_full_n;
    end else begin
        imgBayer_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln117_reg_489 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        imgBayer_write = 1'b1;
    end else begin
        imgBayer_write = 1'b0;
    end
end

always @ (*) begin
    if ((((eol_1_reg_338 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((or_ln121_fu_427_p2 == 1'd0) & (icmp_ln117_fu_422_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((sof_reg_153 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int_regslice;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op65_read_state6 == 1'b1)) | (~((eol_1_reg_338 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (eol_1_reg_338 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | (~((sof_reg_153 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_153 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_video_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((sof_reg_153 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_153 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((sof_reg_153 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_sof_phi_fu_157_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln114_fu_411_p2 == 1'd0) & (cmp7230_reg_466 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln117_fu_422_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln117_fu_422_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((eol_1_reg_338 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (eol_1_reg_338 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((eol_1_reg_338 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_eol_1_phi_fu_341_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op65_read_state6 == 1'b1)) | ((icmp_ln117_reg_489 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (imgBayer_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op65_read_state6 == 1'b1)) | ((icmp_ln117_reg_489 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (imgBayer_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op65_read_state6 == 1'b1)) | ((icmp_ln117_reg_489 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (imgBayer_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((sof_reg_153 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op65_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((icmp_ln117_reg_489 == 1'd0) & (imgBayer_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((eol_1_reg_338 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_167 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_1_phi_fu_341_p4 = eol_1_reg_338;

assign ap_phi_mux_sof_phi_fu_157_p4 = sof_reg_153;

assign ap_phi_reg_pp1_iter0_axi_data_V_7_reg_251 = 'bx;

assign ap_phi_reg_pp1_iter0_axi_last_V_9_reg_264 = 'bx;

always @ (*) begin
    ap_predicate_op65_read_state6 = ((or_ln121_fu_427_p2 == 1'd0) & (icmp_ln117_fu_422_p2 == 1'd0));
end

assign cmp7230_fu_392_p2 = ((cols_reg_443 == 12'd0) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_368_d = Height[11:0];

assign grp_reg_unsigned_short_s_fu_378_d = WidthIn[11:0];

assign i_1_fu_402_p2 = (i_reg_164 + 11'd1);

assign icmp_ln114_fu_411_p2 = ((i_reg_164 == trunc_ln96_1_reg_438) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_422_p2 = ((j_reg_197 == cols_reg_443) ? 1'b1 : 1'b0);

assign imgBayer_din = axi_data_V_7_reg_251;

assign j_1_fu_416_p2 = (j_reg_197 + 12'd1);

assign or_ln121_fu_427_p2 = (ap_phi_mux_sof_6_phi_fu_223_p4 | ap_phi_mux_eol_phi_fu_212_p4);

assign s_axis_video_TREADY = regslice_both_AXI_video_strm_V_data_V_U_ack_in;

assign trunc_ln96_1_fu_384_p1 = grp_reg_unsigned_short_s_fu_368_ap_return[10:0];

endmodule //design_1_v_demosaic_0_2_AXIvideo2MultiBayer
