// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_demosaic_0_2_ZipperRemoval (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_dout,
        img_empty_n,
        img_read,
        imgUnzip_din,
        imgUnzip_full_n,
        imgUnzip_write,
        height,
        width
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] img_dout;
input   img_empty_n;
output   img_read;
output  [23:0] imgUnzip_din;
input   imgUnzip_full_n;
output   imgUnzip_write;
input  [15:0] height;
input  [15:0] width;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_read;
reg imgUnzip_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1057_reg_784;
reg    imgUnzip_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln1109_reg_788;
reg   [0:0] icmp_ln1109_reg_788_pp0_iter2_reg;
reg   [16:0] x_reg_170;
wire   [16:0] zext_ln1035_fu_181_p1;
wire   [16:0] loopWidth_fu_185_p2;
wire   [15:0] y_1_fu_211_p2;
reg   [15:0] y_1_reg_766;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1049_fu_217_p2;
wire   [16:0] x_1_fu_222_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1051_fu_228_p2;
reg   [0:0] icmp_ln1051_reg_780;
reg   [0:0] icmp_ln1051_reg_780_pp0_iter1_reg;
wire   [0:0] icmp_ln1057_fu_233_p2;
wire   [0:0] icmp_ln1109_fu_238_p2;
reg   [0:0] icmp_ln1109_reg_788_pp0_iter1_reg;
reg   [7:0] rhs_load_reg_792;
reg   [7:0] rhs_2_load_reg_797;
reg   [7:0] rhs_4_load_reg_802;
wire   [0:0] icmp_ln878_fu_408_p2;
reg   [0:0] icmp_ln878_reg_807;
wire   [0:0] icmp_ln882_fu_414_p2;
reg   [0:0] icmp_ln882_reg_812;
wire   [0:0] icmp_ln882_1_fu_420_p2;
reg   [0:0] icmp_ln882_1_reg_817;
wire   [0:0] icmp_ln878_1_fu_426_p2;
reg   [0:0] icmp_ln878_1_reg_822;
reg   [7:0] r_V_reg_827;
reg   [7:0] g_V_reg_832;
reg   [7:0] b_V_reg_837;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] y_reg_159;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
reg   [7:0] g_0_V_fu_90;
wire   [7:0] inpix_val_V_0_fu_244_p1;
reg   [7:0] b_0_V_fu_94;
reg   [7:0] r_0_V_fu_98;
reg   [7:0] luma_1_V_fu_102;
wire   [7:0] zext_ln1082_fu_404_p1;
reg   [7:0] luma_1_V_1_fu_106;
reg   [7:0] rhs_fu_110;
reg   [7:0] rhs_1_fu_114;
reg   [7:0] rhs_2_fu_118;
reg   [7:0] rhs_3_fu_122;
reg   [7:0] rhs_4_fu_126;
reg   [7:0] rhs_5_fu_130;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] lshr_ln_fu_316_p4;
wire   [6:0] lshr_ln1079_1_fu_330_p4;
wire   [4:0] trunc_ln_fu_344_p4;
wire   [4:0] trunc_ln1079_1_fu_358_p4;
wire   [7:0] zext_ln1079_4_fu_340_p1;
wire   [7:0] zext_ln1079_3_fu_326_p1;
wire   [5:0] zext_ln1079_fu_354_p1;
wire   [5:0] zext_ln1079_1_fu_368_p1;
wire   [5:0] add_ln1079_1_fu_378_p2;
wire   [7:0] zext_ln1079_2_fu_384_p1;
wire   [7:0] add_ln1079_fu_372_p2;
wire   [7:0] lum_fu_388_p2;
wire   [4:0] luma_0_V_fu_394_p4;
wire   [8:0] ret_6_fu_432_p3;
wire   [8:0] zext_ln1346_1_fu_440_p1;
wire   [8:0] zext_ln1346_3_fu_448_p1;
wire   [8:0] add_ln1346_fu_452_p2;
wire   [9:0] zext_ln1346_5_fu_458_p1;
wire   [9:0] zext_ln1346_fu_444_p1;
wire   [9:0] ret_fu_462_p2;
wire   [8:0] ret_7_fu_478_p3;
wire   [8:0] zext_ln1346_6_fu_486_p1;
wire   [8:0] zext_ln1346_7_fu_494_p1;
wire   [8:0] add_ln1346_2_fu_498_p2;
wire   [9:0] zext_ln1346_8_fu_504_p1;
wire   [9:0] zext_ln1346_2_fu_490_p1;
wire   [9:0] ret_3_fu_508_p2;
wire   [8:0] ret_8_fu_524_p3;
wire   [8:0] zext_ln1346_9_fu_532_p1;
wire   [8:0] zext_ln1346_10_fu_540_p1;
wire   [8:0] add_ln1346_4_fu_544_p2;
wire   [9:0] zext_ln1346_11_fu_550_p1;
wire   [9:0] zext_ln1346_4_fu_536_p1;
wire   [9:0] ret_5_fu_554_p2;
wire   [0:0] xor_ln882_fu_622_p2;
wire   [0:0] xor_ln882_1_fu_632_p2;
wire   [0:0] and_ln1094_fu_627_p2;
wire   [0:0] and_ln1094_1_fu_637_p2;
wire   [0:0] or_ln1094_fu_642_p2;
wire   [7:0] select_ln1094_fu_648_p3;
wire   [7:0] select_ln1094_2_fu_660_p3;
wire   [7:0] select_ln1094_1_fu_654_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1049_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln1049_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln1049_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                luma_1_V_fu_102[0] <= 1'b0;
        luma_1_V_fu_102[1] <= 1'b0;
        luma_1_V_fu_102[2] <= 1'b0;
        luma_1_V_fu_102[3] <= 1'b0;
        luma_1_V_fu_102[4] <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1051_reg_780_pp0_iter1_reg == 1'd0))) begin
                luma_1_V_fu_102[4 : 0] <= zext_ln1082_fu_404_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rhs_2_fu_118 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1051_reg_780_pp0_iter1_reg == 1'd0))) begin
        rhs_2_fu_118 <= g_0_V_fu_90;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rhs_4_fu_126 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1051_reg_780_pp0_iter1_reg == 1'd0))) begin
        rhs_4_fu_126 <= b_0_V_fu_94;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rhs_fu_110 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1051_reg_780_pp0_iter1_reg == 1'd0))) begin
        rhs_fu_110 <= r_0_V_fu_98;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1051_fu_228_p2 == 1'd0))) begin
        x_reg_170 <= x_1_fu_222_p2;
    end else if (((icmp_ln1049_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_reg_170 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_reg_159 <= y_1_reg_766;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_159 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_784 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_0_V_fu_94 <= {{img_dout[15:8]}};
        g_0_V_fu_90 <= inpix_val_V_0_fu_244_p1;
        r_0_V_fu_98 <= {{img_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        b_V_reg_837 <= {{ret_5_fu_554_p2[9:2]}};
        g_V_reg_832 <= {{ret_3_fu_508_p2[9:2]}};
        icmp_ln1109_reg_788_pp0_iter2_reg <= icmp_ln1109_reg_788_pp0_iter1_reg;
        icmp_ln878_1_reg_822 <= icmp_ln878_1_fu_426_p2;
        icmp_ln878_reg_807 <= icmp_ln878_fu_408_p2;
        icmp_ln882_1_reg_817 <= icmp_ln882_1_fu_420_p2;
        icmp_ln882_reg_812 <= icmp_ln882_fu_414_p2;
        r_V_reg_827 <= {{ret_fu_462_p2[9:2]}};
        rhs_2_load_reg_797 <= rhs_2_fu_118;
        rhs_4_load_reg_802 <= rhs_4_fu_126;
        rhs_load_reg_792 <= rhs_fu_110;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1051_reg_780 <= icmp_ln1051_fu_228_p2;
        icmp_ln1051_reg_780_pp0_iter1_reg <= icmp_ln1051_reg_780;
        icmp_ln1109_reg_788_pp0_iter1_reg <= icmp_ln1109_reg_788;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1051_fu_228_p2 == 1'd0))) begin
        icmp_ln1057_reg_784 <= icmp_ln1057_fu_233_p2;
        icmp_ln1109_reg_788 <= icmp_ln1109_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1051_reg_780_pp0_iter1_reg == 1'd0))) begin
        luma_1_V_1_fu_106[4 : 0] <= luma_1_V_fu_102[4 : 0];
        rhs_1_fu_114 <= rhs_fu_110;
        rhs_3_fu_122 <= rhs_2_fu_118;
        rhs_5_fu_130 <= rhs_4_fu_126;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_1_reg_766 <= y_1_fu_211_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1051_fu_228_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1049_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1109_reg_788_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        imgUnzip_blk_n = imgUnzip_full_n;
    end else begin
        imgUnzip_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1109_reg_788_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgUnzip_write = 1'b1;
    end else begin
        imgUnzip_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_784 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_blk_n = img_empty_n;
    end else begin
        img_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_784 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_read = 1'b1;
    end else begin
        img_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1049_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1049_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1051_fu_228_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1051_fu_228_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1079_1_fu_378_p2 = (zext_ln1079_fu_354_p1 + zext_ln1079_1_fu_368_p1);

assign add_ln1079_fu_372_p2 = (zext_ln1079_4_fu_340_p1 + zext_ln1079_3_fu_326_p1);

assign add_ln1346_2_fu_498_p2 = (zext_ln1346_6_fu_486_p1 + zext_ln1346_7_fu_494_p1);

assign add_ln1346_4_fu_544_p2 = (zext_ln1346_9_fu_532_p1 + zext_ln1346_10_fu_540_p1);

assign add_ln1346_fu_452_p2 = (zext_ln1346_1_fu_440_p1 + zext_ln1346_3_fu_448_p1);

assign and_ln1094_1_fu_637_p2 = (xor_ln882_1_fu_632_p2 & icmp_ln878_1_reg_822);

assign and_ln1094_fu_627_p2 = (xor_ln882_fu_622_p2 & icmp_ln878_reg_807);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1109_reg_788_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (imgUnzip_full_n == 1'b0)) | ((icmp_ln1057_reg_784 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (img_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1109_reg_788_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (imgUnzip_full_n == 1'b0)) | ((icmp_ln1057_reg_784 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (img_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1109_reg_788_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (imgUnzip_full_n == 1'b0)) | ((icmp_ln1057_reg_784 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (img_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln1057_reg_784 == 1'd1) & (img_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((icmp_ln1109_reg_788_pp0_iter2_reg == 1'd0) & (imgUnzip_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln1049_fu_217_p2 = ((y_reg_159 == height) ? 1'b1 : 1'b0);

assign icmp_ln1051_fu_228_p2 = ((x_reg_170 == loopWidth_fu_185_p2) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_233_p2 = ((x_reg_170 < zext_ln1035_fu_181_p1) ? 1'b1 : 1'b0);

assign icmp_ln1109_fu_238_p2 = ((x_reg_170 == 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_426_p2 = ((luma_1_V_fu_102 < zext_ln1082_fu_404_p1) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_408_p2 = ((luma_1_V_1_fu_106 < luma_1_V_fu_102) ? 1'b1 : 1'b0);

assign icmp_ln882_1_fu_420_p2 = ((luma_1_V_1_fu_106 < luma_1_V_fu_102) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_414_p2 = ((luma_1_V_fu_102 < zext_ln1082_fu_404_p1) ? 1'b1 : 1'b0);

assign imgUnzip_din = {{{select_ln1094_fu_648_p3}, {select_ln1094_2_fu_660_p3}}, {select_ln1094_1_fu_654_p3}};

assign inpix_val_V_0_fu_244_p1 = img_dout[7:0];

assign loopWidth_fu_185_p2 = (zext_ln1035_fu_181_p1 + 17'd1);

assign lshr_ln1079_1_fu_330_p4 = {{g_0_V_fu_90[7:1]}};

assign lshr_ln_fu_316_p4 = {{r_0_V_fu_98[7:2]}};

assign lum_fu_388_p2 = (zext_ln1079_2_fu_384_p1 + add_ln1079_fu_372_p2);

assign luma_0_V_fu_394_p4 = {{lum_fu_388_p2[7:3]}};

assign or_ln1094_fu_642_p2 = (and_ln1094_fu_627_p2 | and_ln1094_1_fu_637_p2);

assign ret_3_fu_508_p2 = (zext_ln1346_8_fu_504_p1 + zext_ln1346_2_fu_490_p1);

assign ret_5_fu_554_p2 = (zext_ln1346_11_fu_550_p1 + zext_ln1346_4_fu_536_p1);

assign ret_6_fu_432_p3 = {{rhs_fu_110}, {1'd0}};

assign ret_7_fu_478_p3 = {{rhs_2_fu_118}, {1'd0}};

assign ret_8_fu_524_p3 = {{rhs_4_fu_126}, {1'd0}};

assign ret_fu_462_p2 = (zext_ln1346_5_fu_458_p1 + zext_ln1346_fu_444_p1);

assign select_ln1094_1_fu_654_p3 = ((or_ln1094_fu_642_p2[0:0] == 1'b1) ? g_V_reg_832 : rhs_2_load_reg_797);

assign select_ln1094_2_fu_660_p3 = ((or_ln1094_fu_642_p2[0:0] == 1'b1) ? b_V_reg_837 : rhs_4_load_reg_802);

assign select_ln1094_fu_648_p3 = ((or_ln1094_fu_642_p2[0:0] == 1'b1) ? r_V_reg_827 : rhs_load_reg_792);

assign start_out = real_start;

assign trunc_ln1079_1_fu_358_p4 = {{b_0_V_fu_94[7:3]}};

assign trunc_ln_fu_344_p4 = {{g_0_V_fu_90[7:3]}};

assign x_1_fu_222_p2 = (x_reg_170 + 17'd1);

assign xor_ln882_1_fu_632_p2 = (icmp_ln882_1_reg_817 ^ 1'd1);

assign xor_ln882_fu_622_p2 = (icmp_ln882_reg_812 ^ 1'd1);

assign y_1_fu_211_p2 = (y_reg_159 + 16'd1);

assign zext_ln1035_fu_181_p1 = width;

assign zext_ln1079_1_fu_368_p1 = trunc_ln1079_1_fu_358_p4;

assign zext_ln1079_2_fu_384_p1 = add_ln1079_1_fu_378_p2;

assign zext_ln1079_3_fu_326_p1 = lshr_ln_fu_316_p4;

assign zext_ln1079_4_fu_340_p1 = lshr_ln1079_1_fu_330_p4;

assign zext_ln1079_fu_354_p1 = trunc_ln_fu_344_p4;

assign zext_ln1082_fu_404_p1 = luma_0_V_fu_394_p4;

assign zext_ln1346_10_fu_540_p1 = rhs_5_fu_130;

assign zext_ln1346_11_fu_550_p1 = add_ln1346_4_fu_544_p2;

assign zext_ln1346_1_fu_440_p1 = r_0_V_fu_98;

assign zext_ln1346_2_fu_490_p1 = ret_7_fu_478_p3;

assign zext_ln1346_3_fu_448_p1 = rhs_1_fu_114;

assign zext_ln1346_4_fu_536_p1 = ret_8_fu_524_p3;

assign zext_ln1346_5_fu_458_p1 = add_ln1346_fu_452_p2;

assign zext_ln1346_6_fu_486_p1 = g_0_V_fu_90;

assign zext_ln1346_7_fu_494_p1 = rhs_3_fu_122;

assign zext_ln1346_8_fu_504_p1 = add_ln1346_2_fu_498_p2;

assign zext_ln1346_9_fu_532_p1 = b_0_V_fu_94;

assign zext_ln1346_fu_444_p1 = ret_6_fu_432_p3;

always @ (posedge ap_clk) begin
    luma_1_V_fu_102[7:5] <= 3'b000;
    luma_1_V_1_fu_106[7:5] <= 3'b000;
end

endmodule //design_1_v_demosaic_0_2_ZipperRemoval
